import numpy as np

from openmdao.api import ExplicitComponent

class VelDistr(ExplicitComponent):

	def initialize(self):
		self.options.declare('freqs', types=dict)

	def setup(self):
		freqs = self.options['freqs']
		self.omega = freqs['omega']
		N_omega = len(self.omega)

		self.add_input('Re_RAO_wave_vel_surge', val=np.zeros(N_omega), units='(m/s)/m')
		self.add_input('Re_RAO_wave_vel_pitch', val=np.zeros(N_omega), units='(rad/s)/m')
		self.add_input('Re_RAO_wave_vel_bend', val=np.zeros(N_omega), units='(m/s)/m')
		self.add_input('Im_RAO_wave_vel_surge', val=np.zeros(N_omega), units='(m/s)/m')
		self.add_input('Im_RAO_wave_vel_pitch', val=np.zeros(N_omega), units='(rad/s)/m')
		self.add_input('Im_RAO_wave_vel_bend', val=np.zeros(N_omega), units='(m/s)/m')
		self.add_input('Re_RAO_wind_vel_surge', val=np.zeros(N_omega), units='(m/s)/(m/s)')
		self.add_input('Re_RAO_wind_vel_pitch', val=np.zeros(N_omega), units='(rad/s)/(m/s)')
		self.add_input('Re_RAO_wind_vel_bend', val=np.zeros(N_omega), units='(m/s)/(m/s)')
		self.add_input('Im_RAO_wind_vel_surge', val=np.zeros(N_omega), units='(m/s)/(m/s)')
		self.add_input('Im_RAO_wind_vel_pitch', val=np.zeros(N_omega), units='(rad/s)/(m/s)')
		self.add_input('Im_RAO_wind_vel_bend', val=np.zeros(N_omega), units='(m/s)/(m/s)')
		self.add_input('Re_RAO_Mwind_vel_surge', val=np.zeros(N_omega), units='(m/s)/(m/s)')
		self.add_input('Re_RAO_Mwind_vel_pitch', val=np.zeros(N_omega), units='(rad/s)/(m/s)')
		self.add_input('Re_RAO_Mwind_vel_bend', val=np.zeros(N_omega), units='(m/s)/(m/s)')
		self.add_input('Im_RAO_Mwind_vel_surge', val=np.zeros(N_omega), units='(m/s)/(m/s)')
		self.add_input('Im_RAO_Mwind_vel_pitch', val=np.zeros(N_omega), units='(rad/s)/(m/s)')
		self.add_input('Im_RAO_Mwind_vel_bend', val=np.zeros(N_omega), units='(m/s)/(m/s)')
		self.add_input('S_wave', val=np.zeros(N_omega), units='m**2*s/rad')
		self.add_input('S_wind', val=np.zeros(N_omega), units='m**2/(rad*s)')
		self.add_input('z_sparnode', val=np.zeros(13), units='m')
		self.add_input('x_sparelem', val=np.zeros(12), units='m')

		self.add_output('stddev_vel_distr', val=np.zeros(12), units='m/s')

		self.declare_partials('*', '*')

	def compute(self, inputs, outputs):
		omega = self.omega
		
		z_sparnode = inputs['z_sparnode']
		x_sparelem = inputs['x_sparelem']

		for i in xrange(len(x_sparelem)):
			z = (z_sparnode[i] + z_sparnode[i+1]) / 2.

			resp_vel_disp = np.abs((inputs['Re_RAO_wave_vel_surge'] + 1j * inputs['Im_RAO_wave_vel_surge']) + z * (inputs['Re_RAO_wave_vel_pitch'] + 1j * inputs['Im_RAO_wave_vel_pitch']) + x_sparelem[i] * (inputs['Re_RAO_wave_vel_bend'] + 1j * inputs['Im_RAO_wave_vel_bend']))**2. * inputs['S_wave'] + np.abs((inputs['Re_RAO_wind_vel_surge'] + 1j * inputs['Im_RAO_wind_vel_surge']) + z * (inputs['Re_RAO_wind_vel_pitch'] + 1j * inputs['Im_RAO_wind_vel_pitch']) + x_sparelem[i] * (inputs['Re_RAO_wind_vel_bend'] + 1j * inputs['Im_RAO_wind_vel_bend']))**2. * inputs['S_wind'] + np.abs((inputs['Re_RAO_Mwind_vel_surge'] + 1j * inputs['Im_RAO_Mwind_vel_surge']) + z * (inputs['Re_RAO_Mwind_vel_pitch'] + 1j * inputs['Im_RAO_Mwind_vel_pitch']) + x_sparelem[i] * (inputs['Re_RAO_Mwind_vel_bend'] + 1j * inputs['Im_RAO_Mwind_vel_bend']))**2. * inputs['S_wind']

			outputs['stddev_vel_distr'][i] = np.sqrt(np.trapz(resp_vel_disp, omega))

	def compute_partials(self, inputs, partials):
		omega = self.omega
		N_omega = len(omega)
		domega = omega[1] - omega[0]
		
		z_sparnode = inputs['z_sparnode']
		x_sparelem = inputs['x_sparelem']

		partials['stddev_vel_distr', 'Re_RAO_wave_vel_surge'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Re_RAO_wave_vel_pitch'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Re_RAO_wave_vel_bend'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Im_RAO_wave_vel_surge'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Im_RAO_wave_vel_pitch'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Im_RAO_wave_vel_bend'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Re_RAO_wind_vel_surge'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Re_RAO_wind_vel_pitch'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Re_RAO_wind_vel_bend'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Im_RAO_wind_vel_surge'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Im_RAO_wind_vel_pitch'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Im_RAO_wind_vel_bend'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_surge'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_pitch'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_bend'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_surge'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_pitch'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_bend'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'S_wave'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'S_wind'] = np.zeros((12,N_omega))
		partials['stddev_vel_distr', 'z_sparnode'] = np.zeros((12,13))
		partials['stddev_vel_distr', 'x_sparelem'] = np.zeros((12,12))

		for i in xrange(len(x_sparelem)):
			z = (z_sparnode[i] + z_sparnode[i+1]) / 2.

			resp_vel_disp = np.abs((inputs['Re_RAO_wave_vel_surge'] + 1j * inputs['Im_RAO_wave_vel_surge']) + z * (inputs['Re_RAO_wave_vel_pitch'] + 1j * inputs['Im_RAO_wave_vel_pitch']) + x_sparelem[i] * (inputs['Re_RAO_wave_vel_bend'] + 1j * inputs['Im_RAO_wave_vel_bend']))**2. * inputs['S_wave'] + np.abs((inputs['Re_RAO_wind_vel_surge'] + 1j * inputs['Im_RAO_wind_vel_surge']) + z * (inputs['Re_RAO_wind_vel_pitch'] + 1j * inputs['Im_RAO_wind_vel_pitch']) + x_sparelem[i] * (inputs['Re_RAO_wind_vel_bend'] + 1j * inputs['Im_RAO_wind_vel_bend']))**2. * inputs['S_wind'] + np.abs((inputs['Re_RAO_Mwind_vel_surge'] + 1j * inputs['Im_RAO_Mwind_vel_surge']) + z * (inputs['Re_RAO_Mwind_vel_pitch'] + 1j * inputs['Im_RAO_Mwind_vel_pitch']) + x_sparelem[i] * (inputs['Re_RAO_Mwind_vel_bend'] + 1j * inputs['Im_RAO_Mwind_vel_bend']))**2. * inputs['S_wind']

			partials['stddev_vel_distr', 'Re_RAO_wave_vel_surge'][i,:] += 2. * (inputs['Re_RAO_wave_vel_surge'] + z * inputs['Re_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend']) * inputs['S_wave'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Re_RAO_wave_vel_pitch'][i,:] += 2. * z * (inputs['Re_RAO_wave_vel_surge'] + z * inputs['Re_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend']) * inputs['S_wave'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Re_RAO_wave_vel_bend'][i,:] += 2. * x_sparelem[i] * (inputs['Re_RAO_wave_vel_surge'] + z * inputs['Re_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend']) * inputs['S_wave'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Im_RAO_wave_vel_surge'][i,:] += 2. * (inputs['Im_RAO_wave_vel_surge'] + z * inputs['Im_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend']) * inputs['S_wave'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Im_RAO_wave_vel_pitch'][i,:] += 2. * z * (inputs['Im_RAO_wave_vel_surge'] + z * inputs['Im_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend']) * inputs['S_wave'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Im_RAO_wave_vel_bend'][i,:] += 2. * x_sparelem[i] * (inputs['Im_RAO_wave_vel_surge'] + z * inputs['Im_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend']) * inputs['S_wave'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Re_RAO_wind_vel_surge'][i,:] += 2. * (inputs['Re_RAO_wind_vel_surge'] + z * inputs['Re_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Re_RAO_wind_vel_pitch'][i,:] += 2. * z * (inputs['Re_RAO_wind_vel_surge'] + z * inputs['Re_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Re_RAO_wind_vel_bend'][i,:] += 2. * x_sparelem[i] * (inputs['Re_RAO_wind_vel_surge'] + z * inputs['Re_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Im_RAO_wind_vel_surge'][i,:] += 2. * (inputs['Im_RAO_wind_vel_surge'] + z * inputs['Im_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Im_RAO_wind_vel_pitch'][i,:] += 2. * z * (inputs['Im_RAO_wind_vel_surge'] + z * inputs['Im_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Im_RAO_wind_vel_bend'][i,:] += 2. * x_sparelem[i] * (inputs['Im_RAO_wind_vel_surge'] + z * inputs['Im_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_surge'][i,:] += 2. * (inputs['Re_RAO_Mwind_vel_surge'] + z * inputs['Re_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_pitch'][i,:] += 2. * z * (inputs['Re_RAO_Mwind_vel_surge'] + z * inputs['Re_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_bend'][i,:] += 2. * x_sparelem[i] * (inputs['Re_RAO_Mwind_vel_surge'] + z * inputs['Re_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_surge'][i,:] += 2. * (inputs['Im_RAO_Mwind_vel_surge'] + z * inputs['Im_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_pitch'][i,:] += 2. * z * (inputs['Im_RAO_Mwind_vel_surge'] + z * inputs['Im_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_bend'][i,:] += 2. * x_sparelem[i] * (inputs['Im_RAO_Mwind_vel_surge'] + z * inputs['Im_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend']) * inputs['S_wind'] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'S_wave'][i,:] = np.abs((inputs['Re_RAO_wave_vel_surge'] + 1j * inputs['Im_RAO_wave_vel_surge']) + z * (inputs['Re_RAO_wave_vel_pitch'] + 1j * inputs['Im_RAO_wave_vel_pitch']) + x_sparelem[i] * (inputs['Re_RAO_wave_vel_bend'] + 1j * inputs['Im_RAO_wave_vel_bend']))**2. * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'S_wind'][i,:] = (np.abs((inputs['Re_RAO_wind_vel_surge'] + 1j * inputs['Im_RAO_wind_vel_surge']) + z * (inputs['Re_RAO_wind_vel_pitch'] + 1j * inputs['Im_RAO_wind_vel_pitch']) + x_sparelem[i] * (inputs['Re_RAO_wind_vel_bend'] + 1j * inputs['Im_RAO_wind_vel_bend']))**2. + np.abs((inputs['Re_RAO_Mwind_vel_surge'] + 1j * inputs['Im_RAO_Mwind_vel_surge']) + z * (inputs['Re_RAO_Mwind_vel_pitch'] + 1j * inputs['Im_RAO_Mwind_vel_pitch']) + x_sparelem[i] * (inputs['Re_RAO_Mwind_vel_bend'] + 1j * inputs['Im_RAO_Mwind_vel_bend']))**2.) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega
			partials['stddev_vel_distr', 'z_sparnode'][i,i] += np.sum(((inputs['Re_RAO_wave_vel_pitch'] * (inputs['Re_RAO_wave_vel_surge'] + z * inputs['Re_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend']) + inputs['Im_RAO_wave_vel_pitch'] * (inputs['Im_RAO_wave_vel_surge'] + z * inputs['Im_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'])) * inputs['S_wave'] + (inputs['Re_RAO_wind_vel_pitch'] * (inputs['Re_RAO_wind_vel_surge'] + z * inputs['Re_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend']) + inputs['Im_RAO_wind_vel_pitch'] * (inputs['Im_RAO_wind_vel_surge'] + z * inputs['Im_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend']) + inputs['Re_RAO_Mwind_vel_pitch'] * (inputs['Re_RAO_Mwind_vel_surge'] + z * inputs['Re_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend']) + inputs['Im_RAO_Mwind_vel_pitch'] * (inputs['Im_RAO_Mwind_vel_surge'] + z * inputs['Im_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'])) * inputs['S_wind']) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega)
			partials['stddev_vel_distr', 'z_sparnode'][i,i+1] += np.sum(((inputs['Re_RAO_wave_vel_pitch'] * (inputs['Re_RAO_wave_vel_surge'] + z * inputs['Re_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend']) + inputs['Im_RAO_wave_vel_pitch'] * (inputs['Im_RAO_wave_vel_surge'] + z * inputs['Im_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'])) * inputs['S_wave'] + (inputs['Re_RAO_wind_vel_pitch'] * (inputs['Re_RAO_wind_vel_surge'] + z * inputs['Re_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend']) + inputs['Im_RAO_wind_vel_pitch'] * (inputs['Im_RAO_wind_vel_surge'] + z * inputs['Im_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend']) + inputs['Re_RAO_Mwind_vel_pitch'] * (inputs['Re_RAO_Mwind_vel_surge'] + z * inputs['Re_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend']) + inputs['Im_RAO_Mwind_vel_pitch'] * (inputs['Im_RAO_Mwind_vel_surge'] + z * inputs['Im_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'])) * inputs['S_wind']) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega)
			partials['stddev_vel_distr', 'x_sparelem'][i,i] += 2. * np.sum(((inputs['Re_RAO_wave_vel_bend'] * (inputs['Re_RAO_wave_vel_surge'] + z * inputs['Re_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend']) + inputs['Im_RAO_wave_vel_bend'] * (inputs['Im_RAO_wave_vel_surge'] + z * inputs['Im_RAO_wave_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'])) * inputs['S_wave'] + (inputs['Re_RAO_wind_vel_bend'] * (inputs['Re_RAO_wind_vel_surge'] + z * inputs['Re_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend']) + inputs['Im_RAO_wind_vel_bend'] * (inputs['Im_RAO_wind_vel_surge'] + z * inputs['Im_RAO_wind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend']) + inputs['Re_RAO_Mwind_vel_bend'] * (inputs['Re_RAO_Mwind_vel_surge'] + z * inputs['Re_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend']) + inputs['Im_RAO_Mwind_vel_bend'] * (inputs['Im_RAO_Mwind_vel_surge'] + z * inputs['Im_RAO_Mwind_vel_pitch'] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'])) * inputs['S_wind']) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega)

			partials['stddev_vel_distr', 'Re_RAO_wave_vel_surge'][i,0] += -2. * (inputs['Re_RAO_wave_vel_surge'][0] + z * inputs['Re_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][0]) * inputs['S_wave'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wave_vel_surge'][i,-1] += -2. * (inputs['Re_RAO_wave_vel_surge'][-1] + z * inputs['Re_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][-1]) * inputs['S_wave'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wave_vel_pitch'][i,0] += -2. * z * (inputs['Re_RAO_wave_vel_surge'][0] + z * inputs['Re_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][0]) * inputs['S_wave'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wave_vel_pitch'][i,-1] += -2. * z * (inputs['Re_RAO_wave_vel_surge'][-1] + z * inputs['Re_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][-1]) * inputs['S_wave'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wave_vel_bend'][i,0] += -2. * x_sparelem[i] * (inputs['Re_RAO_wave_vel_surge'][0] + z * inputs['Re_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][0]) * inputs['S_wave'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wave_vel_bend'][i,-1] += -2. * x_sparelem[i] * (inputs['Re_RAO_wave_vel_surge'][-1] + z * inputs['Re_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][-1]) * inputs['S_wave'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wave_vel_surge'][i,0] += -2. * (inputs['Im_RAO_wave_vel_surge'][0] + z * inputs['Im_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][0]) * inputs['S_wave'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wave_vel_surge'][i,-1] += -2. * (inputs['Im_RAO_wave_vel_surge'][-1] + z * inputs['Im_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][-1]) * inputs['S_wave'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wave_vel_pitch'][i,0] += -2. * z * (inputs['Im_RAO_wave_vel_surge'][0] + z * inputs['Im_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][0]) * inputs['S_wave'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wave_vel_pitch'][i,-1] += -2. * z * (inputs['Im_RAO_wave_vel_surge'][-1] + z * inputs['Im_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][-1]) * inputs['S_wave'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wave_vel_bend'][i,0] += -2. * x_sparelem[i] * (inputs['Im_RAO_wave_vel_surge'][0] + z * inputs['Im_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][0]) * inputs['S_wave'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wave_vel_bend'][i,-1] += -2. * x_sparelem[i] * (inputs['Im_RAO_wave_vel_surge'][-1] + z * inputs['Im_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][-1]) * inputs['S_wave'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wind_vel_surge'][i,0] += -2. * (inputs['Re_RAO_wind_vel_surge'][0] + z * inputs['Re_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wind_vel_surge'][i,-1] += -2. * (inputs['Re_RAO_wind_vel_surge'][-1] + z * inputs['Re_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wind_vel_pitch'][i,0] += -2. * z * (inputs['Re_RAO_wind_vel_surge'][0] + z * inputs['Re_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wind_vel_pitch'][i,-1] += -2. * z * (inputs['Re_RAO_wind_vel_surge'][-1] + z * inputs['Re_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wind_vel_bend'][i,0] += -2. * x_sparelem[i] * (inputs['Re_RAO_wind_vel_surge'][0] + z * inputs['Re_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_wind_vel_bend'][i,-1] += -2. * x_sparelem[i] * (inputs['Re_RAO_wind_vel_surge'][-1] + z * inputs['Re_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wind_vel_surge'][i,0] += -2. * (inputs['Im_RAO_wind_vel_surge'][0] + z * inputs['Im_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wind_vel_surge'][i,-1] += -2. * (inputs['Im_RAO_wind_vel_surge'][-1] + z * inputs['Im_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wind_vel_pitch'][i,0] += -2. * z * (inputs['Im_RAO_wind_vel_surge'][0] + z * inputs['Im_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wind_vel_pitch'][i,-1] += -2. * z * (inputs['Im_RAO_wind_vel_surge'][-1] + z * inputs['Im_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wind_vel_bend'][i,0] += -2. * x_sparelem[i] * (inputs['Im_RAO_wind_vel_surge'][0] + z * inputs['Im_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_wind_vel_bend'][i,-1] += -2. * x_sparelem[i] * (inputs['Im_RAO_wind_vel_surge'][-1] + z * inputs['Im_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_surge'][i,0] += -2. * (inputs['Re_RAO_Mwind_vel_surge'][0] + z * inputs['Re_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_surge'][i,-1] += -2. * (inputs['Re_RAO_Mwind_vel_surge'][-1] + z * inputs['Re_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_pitch'][i,0] += -2. * z * (inputs['Re_RAO_Mwind_vel_surge'][0] + z * inputs['Re_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_pitch'][i,-1] += -2. * z * (inputs['Re_RAO_Mwind_vel_surge'][-1] + z * inputs['Re_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_bend'][i,0] += -2. * x_sparelem[i] * (inputs['Re_RAO_Mwind_vel_surge'][0] + z * inputs['Re_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Re_RAO_Mwind_vel_bend'][i,-1] += -2. * x_sparelem[i] * (inputs['Re_RAO_Mwind_vel_surge'][-1] + z * inputs['Re_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_surge'][i,0] += -2. * (inputs['Im_RAO_Mwind_vel_surge'][0] + z * inputs['Im_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_surge'][i,-1] += -2. * (inputs['Im_RAO_Mwind_vel_surge'][-1] + z * inputs['Im_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_pitch'][i,0] += -2. * z * (inputs['Im_RAO_Mwind_vel_surge'][0] + z * inputs['Im_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_pitch'][i,-1] += -2. * z * (inputs['Im_RAO_Mwind_vel_surge'][-1] + z * inputs['Im_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_bend'][i,0] += -2. * x_sparelem[i] * (inputs['Im_RAO_Mwind_vel_surge'][0] + z * inputs['Im_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][0]) * inputs['S_wind'][0] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'Im_RAO_Mwind_vel_bend'][i,-1] += -2. * x_sparelem[i] * (inputs['Im_RAO_Mwind_vel_surge'][-1] + z * inputs['Im_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][-1]) * inputs['S_wind'][-1] * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'S_wave'][i,0] += -np.abs((inputs['Re_RAO_wave_vel_surge'][0] + 1j * inputs['Im_RAO_wave_vel_surge'][0]) + z * (inputs['Re_RAO_wave_vel_pitch'][0] + 1j * inputs['Im_RAO_wave_vel_pitch'][0]) + x_sparelem[i] * (inputs['Re_RAO_wave_vel_bend'][0] + 1j * inputs['Im_RAO_wave_vel_bend'][0]))**2. * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'S_wave'][i,-1] +=-np.abs((inputs['Re_RAO_wave_vel_surge'][-1] + 1j * inputs['Im_RAO_wave_vel_surge'][-1]) + z * (inputs['Re_RAO_wave_vel_pitch'][-1] + 1j * inputs['Im_RAO_wave_vel_pitch'][-1]) + x_sparelem[i] * (inputs['Re_RAO_wave_vel_bend'][-1] + 1j * inputs['Im_RAO_wave_vel_bend'][-1]))**2. * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'S_wind'][i,0] += -(np.abs((inputs['Re_RAO_wind_vel_surge'][0] + 1j * inputs['Im_RAO_wind_vel_surge'][0]) + z * (inputs['Re_RAO_wind_vel_pitch'][0] + 1j * inputs['Im_RAO_wind_vel_pitch'][0]) + x_sparelem[i] * (inputs['Re_RAO_wind_vel_bend'][0] + 1j * inputs['Im_RAO_wind_vel_bend'][0]))**2. + np.abs((inputs['Re_RAO_Mwind_vel_surge'][0] + 1j * inputs['Im_RAO_Mwind_vel_surge'][0]) + z * (inputs['Re_RAO_Mwind_vel_pitch'][0] + 1j * inputs['Im_RAO_Mwind_vel_pitch'][0]) + x_sparelem[i] * (inputs['Re_RAO_Mwind_vel_bend'][0] + 1j * inputs['Im_RAO_Mwind_vel_bend'][0]))**2.) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'S_wind'][i,-1] += -(np.abs((inputs['Re_RAO_wind_vel_surge'][-1] + 1j * inputs['Im_RAO_wind_vel_surge'][-1]) + z * (inputs['Re_RAO_wind_vel_pitch'][-1] + 1j * inputs['Im_RAO_wind_vel_pitch'][-1]) + x_sparelem[i] * (inputs['Re_RAO_wind_vel_bend'][-1] + 1j * inputs['Im_RAO_wind_vel_bend'][-1]))**2. + np.abs((inputs['Re_RAO_Mwind_vel_surge'][-1] + 1j * inputs['Im_RAO_Mwind_vel_surge'][-1]) + z * (inputs['Re_RAO_Mwind_vel_pitch'][-1] + 1j * inputs['Im_RAO_Mwind_vel_pitch'][-1]) + x_sparelem[i] * (inputs['Re_RAO_Mwind_vel_bend'][-1] + 1j * inputs['Im_RAO_Mwind_vel_bend'][-1]))**2.) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.
			partials['stddev_vel_distr', 'z_sparnode'][i,i] += -np.sum(((inputs['Re_RAO_wave_vel_pitch'][0] * (inputs['Re_RAO_wave_vel_surge'][0] + z * inputs['Re_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][0]) + inputs['Im_RAO_wave_vel_pitch'][0] * (inputs['Im_RAO_wave_vel_surge'][0] + z * inputs['Im_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][0])) * inputs['S_wave'][0] + (inputs['Re_RAO_wind_vel_pitch'][0] * (inputs['Re_RAO_wind_vel_surge'][0] + z * inputs['Re_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][0]) + inputs['Im_RAO_wind_vel_pitch'][0] * (inputs['Im_RAO_wind_vel_surge'][0] + z * inputs['Im_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][0]) + inputs['Re_RAO_Mwind_vel_pitch'][0] * (inputs['Re_RAO_Mwind_vel_surge'][0] + z * inputs['Re_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][0]) + inputs['Im_RAO_Mwind_vel_pitch'][0] * (inputs['Im_RAO_Mwind_vel_surge'][0] + z * inputs['Im_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][0])) * inputs['S_wind'][0]) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.)
			partials['stddev_vel_distr', 'z_sparnode'][i,i+1] += -np.sum(((inputs['Re_RAO_wave_vel_pitch'][0] * (inputs['Re_RAO_wave_vel_surge'][0] + z * inputs['Re_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][0]) + inputs['Im_RAO_wave_vel_pitch'][0] * (inputs['Im_RAO_wave_vel_surge'][0] + z * inputs['Im_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][0])) * inputs['S_wave'][0] + (inputs['Re_RAO_wind_vel_pitch'][0] * (inputs['Re_RAO_wind_vel_surge'][0] + z * inputs['Re_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][0]) + inputs['Im_RAO_wind_vel_pitch'][0] * (inputs['Im_RAO_wind_vel_surge'][0] + z * inputs['Im_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][0]) + inputs['Re_RAO_Mwind_vel_pitch'][0] * (inputs['Re_RAO_Mwind_vel_surge'][0] + z * inputs['Re_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][0]) + inputs['Im_RAO_Mwind_vel_pitch'][0] * (inputs['Im_RAO_Mwind_vel_surge'][0] + z * inputs['Im_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][0])) * inputs['S_wind'][0]) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.)
			partials['stddev_vel_distr', 'z_sparnode'][i,i] += -np.sum(((inputs['Re_RAO_wave_vel_pitch'][-1] * (inputs['Re_RAO_wave_vel_surge'][-1] + z * inputs['Re_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][-1]) + inputs['Im_RAO_wave_vel_pitch'][-1] * (inputs['Im_RAO_wave_vel_surge'][-1] + z * inputs['Im_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][-1])) * inputs['S_wave'][-1] + (inputs['Re_RAO_wind_vel_pitch'][-1] * (inputs['Re_RAO_wind_vel_surge'][-1] + z * inputs['Re_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][-1]) + inputs['Im_RAO_wind_vel_pitch'][-1] * (inputs['Im_RAO_wind_vel_surge'][-1] + z * inputs['Im_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][-1]) + inputs['Re_RAO_Mwind_vel_pitch'][-1] * (inputs['Re_RAO_Mwind_vel_surge'][-1] + z * inputs['Re_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][-1]) + inputs['Im_RAO_Mwind_vel_pitch'][-1] * (inputs['Im_RAO_Mwind_vel_surge'][-1] + z * inputs['Im_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][-1])) * inputs['S_wind'][-1]) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.)
			partials['stddev_vel_distr', 'z_sparnode'][i,i+1] += -np.sum(((inputs['Re_RAO_wave_vel_pitch'][-1] * (inputs['Re_RAO_wave_vel_surge'][-1] + z * inputs['Re_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][-1]) + inputs['Im_RAO_wave_vel_pitch'][-1] * (inputs['Im_RAO_wave_vel_surge'][-1] + z * inputs['Im_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][-1])) * inputs['S_wave'][-1] + (inputs['Re_RAO_wind_vel_pitch'][-1] * (inputs['Re_RAO_wind_vel_surge'][-1] + z * inputs['Re_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][-1]) + inputs['Im_RAO_wind_vel_pitch'][-1] * (inputs['Im_RAO_wind_vel_surge'][-1] + z * inputs['Im_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][-1]) + inputs['Re_RAO_Mwind_vel_pitch'][-1] * (inputs['Re_RAO_Mwind_vel_surge'][-1] + z * inputs['Re_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][-1]) + inputs['Im_RAO_Mwind_vel_pitch'][-1] * (inputs['Im_RAO_Mwind_vel_surge'][-1] + z * inputs['Im_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][-1])) * inputs['S_wind'][-1]) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.)
			partials['stddev_vel_distr', 'x_sparelem'][i,i] += -2. * np.sum(((inputs['Re_RAO_wave_vel_bend'][0] * (inputs['Re_RAO_wave_vel_surge'][0] + z * inputs['Re_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][0]) + inputs['Im_RAO_wave_vel_bend'][0] * (inputs['Im_RAO_wave_vel_surge'][0] + z * inputs['Im_RAO_wave_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][0])) * inputs['S_wave'][0] + (inputs['Re_RAO_wind_vel_bend'][0] * (inputs['Re_RAO_wind_vel_surge'][0] + z * inputs['Re_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][0]) + inputs['Im_RAO_wind_vel_bend'][0] * (inputs['Im_RAO_wind_vel_surge'][0] + z * inputs['Im_RAO_wind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][0]) + inputs['Re_RAO_Mwind_vel_bend'][0] * (inputs['Re_RAO_Mwind_vel_surge'][0] + z * inputs['Re_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][0]) + inputs['Im_RAO_Mwind_vel_bend'][0] * (inputs['Im_RAO_Mwind_vel_surge'][0] + z * inputs['Im_RAO_Mwind_vel_pitch'][0] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][0])) * inputs['S_wind'][0]) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.)
			partials['stddev_vel_distr', 'x_sparelem'][i,i] += -2. * np.sum(((inputs['Re_RAO_wave_vel_bend'][-1] * (inputs['Re_RAO_wave_vel_surge'][-1] + z * inputs['Re_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wave_vel_bend'][-1]) + inputs['Im_RAO_wave_vel_bend'][-1] * (inputs['Im_RAO_wave_vel_surge'][-1] + z * inputs['Im_RAO_wave_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wave_vel_bend'][-1])) * inputs['S_wave'][-1] + (inputs['Re_RAO_wind_vel_bend'][-1] * (inputs['Re_RAO_wind_vel_surge'][-1] + z * inputs['Re_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_wind_vel_bend'][-1]) + inputs['Im_RAO_wind_vel_bend'][-1] * (inputs['Im_RAO_wind_vel_surge'][-1] + z * inputs['Im_RAO_wind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_wind_vel_bend'][-1]) + inputs['Re_RAO_Mwind_vel_bend'][-1] * (inputs['Re_RAO_Mwind_vel_surge'][-1] + z * inputs['Re_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Re_RAO_Mwind_vel_bend'][-1]) + inputs['Im_RAO_Mwind_vel_bend'][-1] * (inputs['Im_RAO_Mwind_vel_surge'][-1] + z * inputs['Im_RAO_Mwind_vel_pitch'][-1] + x_sparelem[i] * inputs['Im_RAO_Mwind_vel_bend'][-1])) * inputs['S_wind'][-1]) * 0.5 / np.sqrt(np.trapz(resp_vel_disp, omega)) * domega / 2.)